part1 = b[["mu_s"]] - target
part2 = diag(rep(1, n1)) / b[["r_s"]]^2
} else
{
########################## new #########################
qr_decom = qr(X1[,b[['A']]])
k = qr_decom$rank
Q = qr.Q(qr_decom)
P_A = B2P(Q[,1:k])
#########################################################
P_perp = diag(rep(1, n1)) - P_A
part1 = b[["mu_s"]] + b[["mu_w"]] - target
part2 = P_A / b[["r_s"]]^2  + P_perp / b[["r_w"]]^2
}
coverage_twoStep[i] = (t(part1) %*% part2 %*% part1)/ n1
coverage_adp[i] = L2NormSquare(target - X1 %*% d$hbeta) / n1 / (d$r^2)
}
coverage_twoStep
coverage_adp
which(coverage_twoStep < 1)
index_from_min_to_max[1:23]
Y1
target[index_from_min_to_max[1:23]] = 0
target
target = Y1
target[index_from_min_to_max[1:23]] = 0
target
Y1[index_from_min_to_max[1:23]]
Y1[index_from_min_to_max[23]]
abs(Y1 < 0.71)
sum(abs(Y1 < 0.71))
sum(abs(Y1) < 0.71)
df = rbind(data.frame(index = factor(which(sub_grp == 1)), vec = target, label = "mu"),
data.frame(index = factor(which(sub_grp == 1)), vec = Y1, label = "Y"))
ggplot(data = df) + geom_point(aes(x = index, y = vec, color = label), alpha = 0.5, size = 3) +
geom_hline(yintercept = 0.71, linetype = "dashed") + geom_hline(yintercept = -0.71, linetype = "dashed")
IsZero = rep("No", n1)
IsZero[index_from_min_to_max[1:i]] = "Yes"
df = rbind(data.frame(index = factor(which(sub_grp == 1)), vec = target, label = "mu", IsZero = IsZero),
data.frame(index = factor(which(sub_grp == 1)), vec = Y1, label = "Y", IsZero = IsZero))
ggplot(data = df) + geom_point(aes(x = index, y = vec, color = label, shape = IsZero), alpha = 0.5, size = 3) +
geom_hline(yintercept = 0.71, linetype = "dashed") + geom_hline(yintercept = -0.71, linetype = "dashed")
i = 23
target = Y1
target[index_from_min_to_max[1:i]] = 0
IsZero = rep("No", n1)
IsZero[index_from_min_to_max[1:i]] = "Yes"
df = rbind(data.frame(index = factor(which(sub_grp == 1)), vec = target, label = "mu", IsZero = IsZero),
data.frame(index = factor(which(sub_grp == 1)), vec = Y1, label = "Y", IsZero = IsZero))
ggplot(data = df) + geom_point(aes(x = index, y = vec, color = label, shape = IsZero), alpha = 0.5, size = 3) +
geom_hline(yintercept = 0.71, linetype = "dashed") + geom_hline(yintercept = -0.71, linetype = "dashed")
n1
44-22
sum(coverage_twoStep > 1)
sum(coverage_adp > 1)
library(plyr)
library(hdi)
library(scalreg)
library(ggplot2)
source("data_fun.R")
source("utils.R")
source("adaptive_fun.R")
source("oracle_fun2.R")
source("two_step_fun_real_data.R")
# read data
data("riboflavin")
x = riboflavin$x
y = riboflavin$y
# clustering
dist = as.dist(1 - abs(cor(t(x))))
model = hclust(dist)
den = as.dendrogram(model)
plot(den, horiz = T, leaflab  = 'none', xlab = expression(paste("1-|", rho, "|")))
sub_grp = cutree(model, k = 2)
table(sub_grp)
library(glmnet)
# set.seed(42)
# fit.cv <- cv.glmnet(x = x, y = y)
# b <- as.matrix(coef(fit.cv))
#
# rownames(b)[b != 0]
# sum(b != 0)
source("two_step_fun_real_data.R")
x = colScale(x)
y = y - mean(y)
X1 = x[sub_grp == 1, ]
Y1 = matrix(y[sub_grp == 1], ncol = 1)
X2 = x[sub_grp == 2, ]
Y2 = matrix(y[sub_grp == 2], ncol = 1)
# set the random seed
set.seed(17436)
# single cnadidate set
# numCandidate has no effect now
cv_model = cv.glmnet(X1, Y1, intercept = F)
lam1 = cv_model$lambda.1se
# lam1 = 100 # empty A
tmp = two_step(X1, X2, Y1, Y2, lam1, numCandidate = 0, alpha = 0.05, upper = 3, ite = 10000)
a = tmp$volume_stein
cv_model = cv.glmnet(X2, Y2, intercept = F)
lam2 = cv_model$lambda.1se
# lam2 = 100 # empty A
tmp = two_step(X2, X1, Y2, Y1, lam2, numCandidate = 0, alpha = 0.05, upper = 3, ite = 10000)
b = tmp$volume_stein
n1 = dim(X1)[1]
n2 = dim(X2)[1]
a$r_s
a$r_w
a$A
a$hsigma
L2NormSquare(a$mu_s + a$mu_w - Y2) / n2
yhat = as.vector(a$mu_s + a$mu_w)
b$r_s
b$r_w
res = scalreg(X1, Y1, LSE = T)
# adaptive method
cv_model = cv.glmnet(X1, Y1, intercept = F)
lam1 = cv_model$lambda.1se
c = adaptive(X1, Y1, X2, Y2, Y2, lam1, sig = 1, alpha = 0.05)
# for beta hat
lasso = glmnet(X1, Y1, family="gaussian", lambda=lam1, intercept=F)
c$hbeta = as.matrix(lasso$beta)
cv_model = cv.glmnet(X2, Y2, intercept = F)
lam2 = cv_model$lambda.1se
d = adaptive(X2, Y2, X1, Y1, Y1, lam2, sig = 1, alpha = 0.05)
# for beta hat
lasso2 = glmnet(X2, Y2, family="gaussian", lambda=lam2, intercept=F)
d$hbeta = as.matrix(lasso2$beta)
# set the random seed
set.seed(17436)
# single cnadidate set
# numCandidate has no effect now
cv_model = cv.glmnet(X1, Y1, intercept = F)
lam1 = cv_model$lambda.1se
# lam1 = 100 # empty A
tmp = two_step(X1, X2, Y1, Y2, lam1, numCandidate = 0, alpha = 0.05, upper = 3, ite = 10000)
a = tmp$volume_stein
cv_model = cv.glmnet(X2, Y2, intercept = F)
lam2 = cv_model$lambda.1se
# lam2 = 100 # empty A
tmp = two_step(X2, X1, Y2, Y1, lam2, numCandidate = 0, alpha = 0.05, upper = 3, ite = 10000)
b = tmp$volume_stein
n1 = dim(X1)[1]
n2 = dim(X2)[1]
a$r_s
a$r_w
a$A
a$hsigma
L2NormSquare(a$mu_s + a$mu_w - Y2) / n2
yhat = as.vector(a$mu_s + a$mu_w)
b$r_s
b$r_w
res = scalreg(X1, Y1, LSE = T)
# adaptive method
cv_model = cv.glmnet(X1, Y1, intercept = F)
lam1 = cv_model$lambda.1se
c = adaptive(X1, Y1, X2, Y2, Y2, lam1, sig = 1, alpha = 0.05)
# for beta hat
lasso = glmnet(X1, Y1, family="gaussian", lambda=lam1, intercept=F)
c$hbeta = as.matrix(lasso$beta)
cv_model = cv.glmnet(X2, Y2, intercept = F)
lam2 = cv_model$lambda.1se
d = adaptive(X2, Y2, X1, Y1, Y1, lam2, sig = 1, alpha = 0.05)
# for beta hat
lasso2 = glmnet(X2, Y2, family="gaussian", lambda=lam2, intercept=F)
d$hbeta = as.matrix(lasso2$beta)
index_from_min_to_max = order(abs(Y2))
target = Y2
coverage_twoStep = rep(0, n2)
coverage_adp = rep(0, n2)
for (i in 1:n2){
target[index_from_min_to_max[i],1] = 0
# coverage
# for object "a"
if (a[['k']] == 0)
{
part1 = a[["mu_w"]] - target
part2 = diag(rep(1, n2)) / a[["r_w"]]^2
} else if (a[['k']] >= n2)
{
part1 = a[["mu_s"]] - target
part2 = diag(rep(1, n2)) / a[["r_s"]]^2
} else
{
########################## new #########################
qr_decom = qr(X2[,a[['A']]])
k = qr_decom$rank
Q = qr.Q(qr_decom)
P_A = B2P(Q[,1:k])
#########################################################
P_perp = diag(rep(1, n2)) - P_A
part1 = a[["mu_s"]] + a[["mu_w"]] - target
part2 = P_A / a[["r_s"]]^2  + P_perp / a[["r_w"]]^2
}
coverage_twoStep[i] = (t(part1) %*% part2 %*% part1)/ n1
coverage_adp[i] = L2NormSquare(target - X2 %*% c$hbeta) / n2 / (c$r^2)
}
coverage_twoStep
coverage_adp
sum(coverage_twoStep < 1)
sum(coverage_twoStep > 1)
sum(coverage_twoStep < 1)
i = 20
target = Y2
target[index_from_min_to_max[1:i]] = 0
Y2[index_from_min_to_max[1:i]]
Y2[index_from_min_to_max[i]]
i = 20
target = Y2
target[index_from_min_to_max[1:i]] = 0
IsZero = rep("No", n2)
IsZero[index_from_min_to_max[1:i]] = "Yes"
df = rbind(data.frame(individuals = factor(which(sub_grp == 2)), responses = target, label = "mu", IsZero),
data.frame(individuals = factor(which(sub_grp == 2)), responses = Y2, label = "Y", IsZero))
# df = df[df$IsZero == "Yes",]
ggplot(data = df) + geom_point(aes(x = individuals, y = responses, shape = label), size = 3) +
geom_hline(yintercept = 0.96, linetype = "dashed") + geom_hline(yintercept = -0.96, linetype = "dashed") +
theme_bw() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), legend.title = element_blank(),
panel.grid = element_blank()) +
ggtitle("27-individuals group")
# df = df[df$IsZero == "Yes",]
ggplot(data = df) + geom_point(aes(x = individuals, y = responses, shape = label), size = 3) +
geom_hline(yintercept = 0.96, linetype = "dashed") + geom_hline(yintercept = -0.96, linetype = "dashed") +
theme_bw() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), legend.title = element_blank(),
panel.grid = element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle("27-individuals group")
index_from_min_to_max = order(abs(Y1))
target = Y1
coverage_twoStep = rep(0, n1)
coverage_adp = rep(0, n1)
for (i in 1:n1){
target[index_from_min_to_max[i],1] = 0
# coverage
# for object "b"
if (b[['k']] == 0)
{
part1 = b[["mu_w"]] - target
part2 = diag(rep(1, n1)) / b[["r_w"]]^2
} else if (b[['k']] >= n1)
{
part1 = b[["mu_s"]] - target
part2 = diag(rep(1, n1)) / b[["r_s"]]^2
} else
{
########################## new #########################
qr_decom = qr(X1[,b[['A']]])
k = qr_decom$rank
Q = qr.Q(qr_decom)
P_A = B2P(Q[,1:k])
#########################################################
P_perp = diag(rep(1, n1)) - P_A
part1 = b[["mu_s"]] + b[["mu_w"]] - target
part2 = P_A / b[["r_s"]]^2  + P_perp / b[["r_w"]]^2
}
coverage_twoStep[i] = (t(part1) %*% part2 %*% part1)/ n1
coverage_adp[i] = L2NormSquare(target - X1 %*% d$hbeta) / n1 / (d$r^2)
}
sum(coverage_twoStep < 1)
coverage_adp
sum(coverage_twoStep < 1)
i = 25
target = Y1
target[index_from_min_to_max[1:i]] = 0
Y1[index_from_min_to_max[i]]
Y1[index_from_min_to_max[i+1]]
n1
i = 25
target = Y1
target[index_from_min_to_max[1:i]] = 0
IsZero = rep("No", n1)
IsZero[index_from_min_to_max[1:i]] = "Yes"
df = rbind(data.frame(individuals = factor(which(sub_grp == 1)), responses = target, label = "mu", IsZero),
data.frame(individuals = factor(which(sub_grp == 1)), responses = Y1, label = "Y", IsZero))
# df = df[df$IsZero == "Yes",]
ggplot(data = df) + geom_point(aes(x = individuals, y = responses, shape = label), size = 3) +
geom_hline(yintercept = 0.74, linetype = "dashed") + geom_hline(yintercept = -0.74, linetype = "dashed") +
theme_bw() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), legend.title = element_blank(),
panel.grid = element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle("44-individuals group")
a$r_s
a$r_w
a$logVol
exp(a$logVol / n2)
b$r_s
b$r_w
exp(b$logVol / n1)
setwd("C:/Study/Phd/HonestCI/R code/current development/6 n200p800 unknown_sigma")
library(plyr)
library(hdi)
library(scalreg)
library(ggplot2)
source("data_fun.R")
source("utils.R")
source("adaptive_fun.R")
source("oracle_fun2.R")
source("two_step_fun_real_data.R")
# read data
data("riboflavin")
x = riboflavin$x
y = riboflavin$y
# clustering
dist = as.dist(1 - abs(cor(t(x))))
model = hclust(dist)
den = as.dendrogram(model)
plot(den, horiz = T, leaflab  = 'none', xlab = expression(paste("1-|", rho, "|")))
sub_grp = cutree(model, k = 2)
table(sub_grp)
library(glmnet)
setwd("C:/Study/Phd/HonestCI/R code/current development/6 n200p800 unknown_sigma")
library(plyr)
library(hdi)
library(scalreg)
library(ggplot2)
source("data_fun.R")
source("utils.R")
source("adaptive_fun.R")
source("oracle_fun2.R")
source("two_step_fun_real_data.R")
# read data
data("riboflavin")
x = riboflavin$x
y = riboflavin$y
# clustering
dist = as.dist(1 - abs(cor(t(x))))
model = hclust(dist)
den = as.dendrogram(model)
plot(den, horiz = T, leaflab  = 'none', xlab = expression(paste("1-|", rho, "|")))
sub_grp = cutree(model, k = 2)
table(sub_grp)
library(glmnet)
# set.seed(42)
# a wrap function
two_step_stein_real_data = function(x, y, sig, index) {
n = length(y)
p = dim(x)[2]
# constants
numCandidate = 20
alpha = 0.05
upper = 10
ite = 400
# generate data
Y = matrix(y + sig * rnorm(n), ncol = 1)
X = x
# split
X1 = X[index, ]
X2 = X[-index, ]
Y1 = Y[index, ,drop=F]
Y2 = Y[-index, ,drop=F]
mu1 = matrix(y[index], ncol = 1)
mu2 = matrix(y[-index], ncol = 1)
# lam1 setup
# lam1 = 2 * sqrt(2) * sqrt(log(p) / n)
lam1 = cv.glmnet(X1, Y1, intercept = F)$lambda.1se
# lam1 = cv.glmnet(X1, Y1, intercept = F, nfolds = 5)$lambda.min
model = two_step(X1, X2, Y1, Y2, lam1, numCandidate, alpha, upper, ite, sig)$volume_stein
# model = two_step(X1, X2, Y1, Y2, lam1, numCandidate, alpha, upper, ite)$volume_stein
n2 = dim(Y2)[1]
if (model[['k']] == 0)
{
part1 = model[["mu_w"]] - mu2
part2 = diag(rep(1, n2)) / model[["r_w"]]^2
mu_s_norm = 0
mu_w_norm = L2NormSquare(model[['mu_w']]) / n2
diff_s_norm = 0
diff_w_norm = L2NormSquare(model[["mu_w"]] - mu2) / n2
w_norm = L2NormSquare(mu2) / n2
cover_s = NA
cover_w = L2NormSquare(model[["mu_w"]] - mu2) / n2 / model[["r_w"]]^2
r_s_raw = NA
r_w_raw = model[['r_w']]
} else if (model[['k']] >= n2)
{
part1 = model[["mu_s"]] - mu2
part2 = diag(rep(1, n2)) / model[["r_s"]]^2
mu_s_norm = L2NormSquare(model[['mu_s']]) / n2
mu_w_norm = 0
diff_s_norm = L2NormSquare(model[["mu_s"]] - mu2) / n2
diff_w_norm = 0
w_norm = 0
cover_s = L2NormSquare(model[["mu_s"]] - mu2) / n2 / model[["r_s"]]^2
cover_w = NA
r_s_raw = model[["r_s"]]
r_w_raw = NA
} else
{
########################## new #########################
qr_decom = qr(X2[,model[['A']]])
k = qr_decom$rank
Q = qr.Q(qr_decom)
P_A = B2P(Q[,1:k])
#########################################################
P_perp = diag(rep(1, n2)) - P_A
part1 = model[["mu_s"]] + model[["mu_w"]] - mu2
part2 = P_A / model[["r_s"]]^2  + P_perp / model[["r_w"]]^2
mu_s_norm = L2NormSquare(model[['mu_s']]) / n2
mu_w_norm = L2NormSquare(model[['mu_w']]) / n2
diff_s_norm = L2NormSquare(model[["mu_s"]] - P_A %*% mu2) / n2
diff_w_norm = L2NormSquare(model[["mu_w"]] - P_perp %*% mu2) / n2
w_norm = L2NormSquare(P_perp %*% mu2) / n2
lower = upper / (upper - 1)
c_s = max(lower, min(n2 / k, upper))
c_w = c_s / (c_s - 1)
# print(c_s)
# print(c_w)
cover_s = L2NormSquare(model[["mu_s"]] - P_A %*% mu2) / n2 / model[["r_s"]]^2 * c_s
cover_w = L2NormSquare(model[["mu_w"]] - P_perp %*% mu2) / n2 / model[["r_w"]]^2 * c_w
r_s_raw = model[['r_s']] / sqrt(c_s)
r_w_raw = model[['r_w']] / sqrt(c_w)
}
covered = (t(part1) %*% part2 %*% part1)/ n2 <= 1
list(r_s = model[['r_s']], r_w = model[['r_w']], k = model[['k']],
hsigma = model[['hsigma']], logVol = model[['logVol']], coverage = covered,
cover_s = cover_s, cover_w = cover_w,
diff_s_norm = diff_s_norm, diff_w_norm = diff_w_norm,
r_s_raw = r_s_raw, r_w_raw = r_w_raw,
w_norm = w_norm)
}
adaptive_real = function(x, y, sig, index) {
n = length(y)
p = dim(x)[2]
# constants
alpha = 0.05
# generate data
Y = matrix(y + sig * rnorm(n), ncol = 1)
X = x
# split
X1 = X[index, ]
X2 = X[-index, ]
Y1 = Y[index, ,drop=F]
Y2 = Y[-index, ,drop=F]
mu1 = matrix(y[index], ncol = 1)
mu2 = matrix(y[-index], ncol = 1)
# lam1 setup
# lam1 = 2 * sqrt(2 ) * sqrt(log(p) / n)
lam1 = cv.glmnet(X1, Y1, intercept = F)$lambda.1se
adaptive(X1, Y1, X2, Y2, mu2, lam1, sig, alpha)
}
# stein, estimated, single, 1se
# coverage: 0.87, r_s: 0.644, r_w, 0.424,
# k: 10.575, hsigma: 0.448, logVol: -19.311,
# coverage: 0.857, r_s: 0.344, r_w, 0.372,
# k: 2.7, hsigma: 0.359, logVol: -43.230,
# stein, constant, single, 1se
# coverage: 0.972, r_s: 0.454, r_w, 0.351,
# k: 10.99,  hsigma: 0.320, logVol: -25.647,
# coverage: 0.907, r_s: 0.304, r_w, 0.337,
# k: 2.827, hsigma: 0.320, logVol: -46.785,
# stein, estimated, single, val
# coverage: 0.98, r_s: 0, r_w, 0.477,
# k: 0,  hsigma: 0.449, logVol: -20.204,
# coverage: 0.827, r_s: 0.002, r_w, 0.369,
# k: 0.005, hsigma: 0.356, logVol: -44.433,
# stein, constant, single, val
# coverage: 0.922, r_s: 0, r_w, 0.359,
# k: 0,  hsigma: 0.320, logVol: -27.602,
# coverage: 0.857, r_s: 0.001, r_w, 0.337,
# k: 0.005, hsigma: 0.320, logVol: -47.813,
# stein, estimated, multiple, 1se
# coverage: 0.81, r_s: 0.470, r_w, 0.416,
# k: 3.09,  hsigma: 0.445, logVol: -21.988,
# coverage: 0.822, r_s: 0.029, r_w, 0.368,
# k: 0.2175, hsigma: 0.357, logVol: -44.492,
# stein, constant, multiple, 1se
# coverage: 0.907, r_s: 0.133, r_w, 0.351,
# k: 1.08,  hsigma: 0.320, logVol: -27.748,
# coverage: 0.867, r_s: 0.006, r_w, 0.337,
# k: 0.06, hsigma: 0.320, logVol: -47.774,
# adaptive, estimated, 1se
# coverage: 0.907, r: 0.768
# k: 10.49,  hsigma: 0.448, logVol: -7.369,
# coverage: 0.947, r: 0.981
# k: 3.09, hsigma: 0.362, logVol: -0.902
# adaptive, constant, 1se
# coverage: 0.955, r: 0.792
# k: 10.675,  hsigma: 0.320, logVol: -6.530,
# coverage: 0.965, r: 1.00
# k: 2.562, hsigma: 0.320, logVol: -0.067
# adaptive, estimated, val
# coverage: 0.932, r: 0.988
# k: 0,  hsigma: 0.445, logVol: -0.368,
# coverage: 0.94, r: 1.008
# k: 0, hsigma: 0.359, logVol: 0.291
# adaptive, constant, val
# coverage: 0.962, r: 1.00
# k: 0,  hsigma: 0.320, logVol: 0.040,
# coverage: 0.97, r: 1.017
# k: 0.005, hsigma: 0.320, logVol: 0.700
ceiling(n / 2)
# normalize X and y
x = colScale(x)
y = y - mean(y)
sig = scalreg(x, y, LSE = T)$lse$hsigma
n = length(y)
source("two_step_fun_real_data.R")
ceiling(n / 2)
source("two_step_fun_real_data.R")
# output
tot = 400
result1 = list()
result2 = list()
for (i in 1:tot){
# index = which(sub_grp == 1)
index = sample(1:n, ceiling(n / 2))
result1[[i]] = two_step_stein_real_data(x, y, sig, index)
result2[[i]] = two_step_stein_real_data(x, y, sig, -index)
}
df1 = ldply(result1, data.frame)
df2 = ldply(result2, data.frame)
colMeans(df1, na.rm = T)
colMeans(df2, na.rm = T)
