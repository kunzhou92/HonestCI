curr_twoStepStein__combined_signals(lamType4, equi_dir, 'EquiCor'))
save(res_twoStepStein__combined_signals,
file='C:/Study/Phd/HonestCI/data/summary/twoStepStein_n500p600_combined_radius.Rdata')
Rdata_dir = 'C:/Study/Phd/HonestCI/data/summary'
Rdata = list.files(Rdata_dir, '*.Rdata')
for (name in Rdata) {
before = load(file.path(Rdata_dir, name))
assign(name, get(before))
}
save(list = Rdata, file = file.path(Rdata_dir, 'summary.Rdata'))
source('C:/Study/Phd/HonestCI/R code/main/utility.R')
source('C:/Study/Phd/HonestCI/R code/main/generateData.R')
source('C:/Study/Phd/HonestCI/R code/main/twoStep.R')
source('C:/Study/Phd/HonestCI/R code/main/adaptive.R')
source('C:/Study/Phd/HonestCI/R code/main/lasso.R')
N = 500
P = 600
SVALUE = c(5, 10)
BVALUE = c(0.1, 0.3, 0.5, 0.7, 0.9, 1, 2, 3, 4, 5)
S_S = 8
B_S = c(1, 2, 3, 4, 5)
S_W = 8
B_W = c(0.01, 0.1, 0.5)
ITE = 100
NFOLDS = 5
RATIOS = seq(from = 0, to = 4, by = 0.05)
dir = "C:/Study/Phd/HonestCI/data/n500p600"
toe_dir = file.path(dir, "toeplitz")
exp_dir = file.path(dir, "exponential")
equi_dir = file.path(dir, "equal_cor")
lamType1 = 0.8
lamType2 = 1
lamType3 = 'cv'
lamType4 = '1se'
library(plyr)
library(ggplot2)
load('C:/Study/Phd/HonestCI/data/summary/summary.Rdata')
load('C:/Study/Phd/HonestCI/data/summary/summary_n500p600.Rdata')
twoStepLasso_n500p600_single_radius.Rdata
colnames(twoStepLasso_n500p600_single_radius.Rdata)
twoStepLasso_n500p600_single_radius.Rdata$r_s
twoStepLasso_n500p600_single_radius.Rdata$r_s == twoStepLasso_n500p600_single_radius.Rdata$r_w
twoStepLasso_n500p600_single_radius.Rdata$r_s - twoStepLasso_n500p600_single_radius.Rdata$r_w
twoStepLasso_n500p600_single_radius.Rdata$sizeA
a = twoStepLasso_n500p600_single_radius.Rdata$sizeA
b = twoStepLasso_n500p600_single_radius.Rdata$r_s == twoStepLasso_n500p600_single_radius.Rdata$r_w
a[b]
a[~b]
a[!b]
source('C:/Study/Phd/HonestCI/R code/main/utility.R')
source('C:/Study/Phd/HonestCI/R code/main/generateData.R')
source('C:/Study/Phd/HonestCI/R code/main/twoStep.R')
source('C:/Study/Phd/HonestCI/R code/main/adaptive.R')
source('C:/Study/Phd/HonestCI/R code/main/lasso.R')
N = 500
P = 600
SVALUE = c(5, 10)
BVALUE = c(0.1, 0.3, 0.5, 0.7, 0.9, 1, 2, 3, 4, 5)
S_S = 8
B_S = c(1, 2, 3, 4, 5)
S_W = 8
B_W = c(0.01, 0.1, 0.5)
ITE = 100
NFOLDS = 5
RATIOS = seq(from = 0, to = 4, by = 0.05)
dir = "C:/Study/Phd/HonestCI/data/n500p600"
toe_dir = file.path(dir, "toeplitz")
exp_dir = file.path(dir, "exponential")
equi_dir = file.path(dir, "equal_cor")
lamType1 = 0.8
lamType2 = 1
lamType3 = 'cv'
lamType4 = '1se'
C_METHOD = "vol"
C_UPPER = 10
curr_twoStepLasso__combined_signals = function(lamType, dir, design)
{
result = testTwoStep_multiTypeSignals(N,
P,
S_S,
B_S,
S_W,
B_W,
sig=1,
lam1Type=lamType,
lam2Coef = 0.8,
ratios=RATIOS,
alpha=0.05,
ite=100,
dir,
sparsity=1,
reportPercent=seq(0, 1, by = 0.2),
upperBoundRatio=2,
type = 'lasso',
c_method = C_METHOD,
c_upper = C_UPPER)
result['label1'] = 'twoStepLasso'
result['label2'] = as.character(lamType)
result['label3'] = is.infinite(result$logVol)
result['label4'] = design
return(result)
}
res_twoStepLasso__combined_signals = rbind(curr_twoStepLasso__combined_signals(lamType1, toe_dir, 'Toeplitz'),
curr_twoStepLasso__combined_signals(lamType2, toe_dir, 'Toeplitz'),
curr_twoStepLasso__combined_signals(lamType3, toe_dir, 'Toeplitz'),
curr_twoStepLasso__combined_signals(lamType4, toe_dir, 'Toeplitz'),
curr_twoStepLasso__combined_signals(lamType1, exp_dir, 'ExpDecay'),
curr_twoStepLasso__combined_signals(lamType2, exp_dir, 'ExpDecay'),
curr_twoStepLasso__combined_signals(lamType3, exp_dir, 'ExpDecay'),
curr_twoStepLasso__combined_signals(lamType4, exp_dir, 'ExpDecay'),
curr_twoStepLasso__combined_signals(lamType1, equi_dir, 'EquiCor'),
curr_twoStepLasso__combined_signals(lamType2, equi_dir, 'EquiCor'),
curr_twoStepLasso__combined_signals(lamType3, equi_dir, 'EquiCor'),
curr_twoStepLasso__combined_signals(lamType4, equi_dir, 'EquiCor'))
save(res_twoStepLasso__combined_signals,
file='C:/Study/Phd/HonestCI/data/summary/twoStepLasso_n500p600_combined_vol.Rdata')
source('C:/Study/Phd/HonestCI/R code/main/utility.R')
source('C:/Study/Phd/HonestCI/R code/main/generateData.R')
source('C:/Study/Phd/HonestCI/R code/main/twoStep.R')
source('C:/Study/Phd/HonestCI/R code/main/adaptive.R')
source('C:/Study/Phd/HonestCI/R code/main/lasso.R')
N = 500
P = 600
SVALUE = c(5, 10)
BVALUE = c(0.1, 0.3, 0.5, 0.7, 0.9, 1, 2, 3, 4, 5)
S_S = 8
B_S = c(1, 2, 3, 4, 5)
S_W = 8
B_W = c(0.01, 0.1, 0.5)
ITE = 100
NFOLDS = 5
RATIOS = seq(from = 0, to = 4, by = 0.05)
dir = "C:/Study/Phd/HonestCI/data/n500p600"
toe_dir = file.path(dir, "toeplitz")
exp_dir = file.path(dir, "exponential")
equi_dir = file.path(dir, "equal_cor")
lamType1 = 0.8
lamType2 = 1
lamType3 = 'cv'
lamType4 = '1se'
C_METHOD = "radius"
C_UPPER = 10
curr_twoStepLasso__combined_signals = function(lamType, dir, design)
{
result = testTwoStep_multiTypeSignals(N,
P,
S_S,
B_S,
S_W,
B_W,
sig=1,
lam1Type=lamType,
lam2Coef = 0.8,
ratios=RATIOS,
alpha=0.05,
ite=100,
dir,
sparsity=1,
reportPercent=seq(0, 1, by = 0.2),
upperBoundRatio=2,
type = 'lasso',
c_method = C_METHOD,
c_upper = C_UPPER)
result['label1'] = 'twoStepLasso'
result['label2'] = as.character(lamType)
result['label3'] = is.infinite(result$logVol)
result['label4'] = design
return(result)
}
res_twoStepLasso__combined_signals = rbind(curr_twoStepLasso__combined_signals(lamType1, toe_dir, 'Toeplitz'),
curr_twoStepLasso__combined_signals(lamType2, toe_dir, 'Toeplitz'),
curr_twoStepLasso__combined_signals(lamType3, toe_dir, 'Toeplitz'),
curr_twoStepLasso__combined_signals(lamType4, toe_dir, 'Toeplitz'),
curr_twoStepLasso__combined_signals(lamType1, exp_dir, 'ExpDecay'),
curr_twoStepLasso__combined_signals(lamType2, exp_dir, 'ExpDecay'),
curr_twoStepLasso__combined_signals(lamType3, exp_dir, 'ExpDecay'),
curr_twoStepLasso__combined_signals(lamType4, exp_dir, 'ExpDecay'),
curr_twoStepLasso__combined_signals(lamType1, equi_dir, 'EquiCor'),
curr_twoStepLasso__combined_signals(lamType2, equi_dir, 'EquiCor'),
curr_twoStepLasso__combined_signals(lamType3, equi_dir, 'EquiCor'),
curr_twoStepLasso__combined_signals(lamType4, equi_dir, 'EquiCor'))
save(res_twoStepLasso__combined_signals,
file='C:/Study/Phd/HonestCI/data/summary/twoStepLasso_n500p600_combined_radius.Rdata')
ppois(6, 5)
ppois(6, 5)^20
2.25-1.66*0.8
0.7*2+0.26
1.66*0.8
1.5 -1.66*0.8
4*0.7+0.26-1.66^2
4*0.2+0.4-0.8^2
x=0.3044
y=0.56
z=0.172
4*x+9*y+6*z
7*7*32
0.5-exp(1) / sqrt(exp(-1) * (1 - exp(-1)) / 50)
0.5-exp(-1) / sqrt(exp(-1) * (1 - exp(-1)) / 50)
exp(-1)
(0.5-exp(-1)) / sqrt(exp(-1) * (1 - exp(-1)) / 50)
pnorm(1.93)
1 - pnorm(1.93)
source('C:/Study/Phd/HonestCI/R code/main/utility.R')
source('C:/Study/Phd/HonestCI/R code/main/generateData.R')
source('C:/Study/Phd/HonestCI/R code/main/twoStep.R')
source('C:/Study/Phd/HonestCI/R code/main/adaptive.R')
source('C:/Study/Phd/HonestCI/R code/main/lasso.R')
N = 500
P = 600
SVALUE = c(5, 10)
BVALUE = c(0.1, 0.3, 0.5, 0.7, 0.9, 1, 2, 3, 4, 5)
S_S = 8
B_S = c(1, 2, 3, 4, 5)
S_W = 8
B_W = c(0.01, 0.1, 0.5)
ITE = 100
NFOLDS = 5
RATIOS = seq(from = 0, to = 4, by = 0.05)
dir = "C:/Study/Phd/HonestCI/data/n500p600"
toe_dir = file.path(dir, "toeplitz")
exp_dir = file.path(dir, "exponential")
equi_dir = file.path(dir, "equal_cor")
lamType1 = 0.8
lamType2 = 1
lamType3 = 'cv'
lamType4 = '1se'
cur_OracleLasso__combined_signals = function(lamType, design_type, design)
{
result = testOracleLasso__combined_signals(2 * N,
P,
S_S,
B_S,
S_W,
B_W,
sig = 1,
lamType,
alpha = 0.05,
ite = 100,
ite2 = 100,
Xtype = design_type,
reportPercent=seq(0, 1, by = 0.2))
result['label1'] = 'OracleLasso'
result['label2'] = as.character(lamType)
result['label3'] = is.infinite(result$logVol)
result['label4'] = design
return(result)
}
res_OracleLasso__combined_signals = rbind(cur_OracleLasso__combined_signals(lamType1, 1, 'Toeplitz'),
cur_OracleLasso__combined_signals(lamType2, 1, 'Toeplitz'),
cur_OracleLasso__combined_signals(lamType1, 2, 'ExpDecay'),
cur_OracleLasso__combined_signals(lamType2, 2, 'ExpDecay'),
cur_OracleLasso__combined_signals(lamType1, 3, 'EquiCor'),
cur_OracleLasso__combined_signals(lamType2, 3, 'EquiCor'))
save(res_OracleLasso__combined_signals,
file='C:/Study/Phd/HonestCI/data/summary/oracleLasso_n500p600_combined.Rdata')
# adaptive
cur_Adaptive__combined_signals = function(lamType, dir, design)
{
result = testAdaptive__combined_singals(N,
P,
S_S,
B_S,
S_W,
B_W,
sig = 1,
lamType = lamType,
alpha = 0.05,
ite = 100,
dir,
reportPercent=seq(0, 1, by = 0.2))
result['label1'] = 'Adaptive'
result['label2'] = as.character(lamType)
result['label3'] = is.infinite(result$logVol)
result['label4'] = design
return(result)
}
resAdaptive__combined_signals = rbind( cur_Adaptive__combined_signals(lamType1, toe_dir, 'Toeplitz'),
cur_Adaptive__combined_signals(lamType2, toe_dir, 'Toeplitz'),
cur_Adaptive__combined_signals(lamType3, toe_dir, 'Toeplitz'),
cur_Adaptive__combined_signals(lamType4, toe_dir, 'Toeplitz'),
cur_Adaptive__combined_signals(lamType1, exp_dir, 'ExpDecay'),
cur_Adaptive__combined_signals(lamType2, exp_dir, 'ExpDecay'),
cur_Adaptive__combined_signals(lamType3, exp_dir, 'ExpDecay'),
cur_Adaptive__combined_signals(lamType4, exp_dir, 'ExpDecay'),
cur_Adaptive__combined_signals(lamType1, equi_dir, 'EquiCor'),
cur_Adaptive__combined_signals(lamType2, equi_dir, 'EquiCor'),
cur_Adaptive__combined_signals(lamType3, equi_dir, 'EquiCor'),
cur_Adaptive__combined_signals(lamType4, equi_dir, 'EquiCor'))
save(resAdaptive__combined_signals,
file='C:/Study/Phd/HonestCI/data/summary/adaptive_n500p600_combined.Rdata')
Rdata_dir = 'C:/Study/Phd/HonestCI/data/summary'
Rdata = list.files(Rdata_dir, '*.Rdata')
for (name in Rdata) {
before = load(file.path(Rdata_dir, name))
assign(name, get(before))
}
save(list = Rdata, file = file.path(Rdata_dir, 'summary.Rdata'))
library(plyr)
?ddply
?aov
install.packages("foreach")
install.packages("foreach")
install.packages("foreach")
install.packages("foreach")
install.packages("foreach")
install.packages("foreach")
install.packages("foreach")
install.packages("foreach", dependencies = T)
install.packages("foreach", dependencies = T)
?latinsquare
?summary
?LSD.test
??LSD.test
?LSD.test
fun = function(delta, n)
{
res = (sqrt(1 + 2 * delta / sqrt(n)) - 1) ^ 2 * n
return(res)
}
?seq
delta = 10
n = seq(0, 100, by = 0.5)
y = fun(delta, n)
plot(n, y)
delta = 1
n = seq(0, 100, by = 0.5)
y = fun(delta, n)
plot(n, y)
delta = 30
n = seq(0, 100, by = 0.5)
y = fun(delta, n)
plot(n, y)
delta = 30
n = seq(0, 1000, by = 1)
y = fun(delta, n)
plot(n, y)
delta = 30
n = seq(0, 10000, by = 1)
y = fun(delta, n)
plot(n, y)
delta = 3
n = seq(0, 10000, by = 1)
y = fun(delta, n)
plot(n, y)
delta = 30
n = seq(0, 10000, by = 1)
y = fun(delta, n)
plot(n, y)
delta = 30
n = seq(0, 100000, by = 10)
y = fun(delta, n)
plot(n, y)
delta = 30
n = seq(0.0001, 100000, by = 10)
y = fun(delta, n)
plot(n, y)
delta = 1
n = seq(0.0001, 100000, by = 10)
y = fun(delta, n)
plot(n, y)
delta = 2
n = seq(0.0001, 100000, by = 10)
y = fun(delta, n)
plot(n, y)
delta = 30
n = seq(0.0001, 100000, by = 10)
y = fun(delta, n)
plot(n, y)
delta = 30
n = seq(0.0001, 10000000, by = 1000)
y = fun(delta, n)
plot(n, y)
length(y)
y[10000]
install.packages("ggplot2")
packageVersion("ggplot2")
setwd("C:/Study/Phd/HonestCI/R code/hoffman2/honest CI/n100p400_test differenet sigma")
# ite
library(plyr)
source("data_fun.R")
source("utils.R")
source("adaptive_fun.R")
source("oracle_fun.R")
source("two_step_fun.R")
N = 100
P = 400
SVALUE = c(10)
BVALUE = c(0.1, 0.3, 0.5, 0.7, 0.9, 1, 2, 3, 4, 5)
S_S = 5
B_S = c(0.1, 0.3, 0.5, 0.7, 0.9, 1, 2, 3, 4, 5)
S_W = 5
B_W = c(0.2)
ITE = 100
NFOLDS = 5
RATIOS = seq(from = 0, to = 4, by = 0.05)
SIG = 0.5
######################## data ###########################
dir.create("data", showWarnings = F)
# toeplitz
toe_dir = "data/toeplitz"
dir.create(toe_dir)
X_TYPE = 1
gen_data(N, P, toe_dir, ITE, X_TYPE)
covariate_single(N, P, SVALUE, BVALUE, toe_dir, ITE, NFOLDS, sig = SIG)
############################ summary #####################
toe_dir = "data/toeplitz"
exp_dir = 'data/exp_decay'
equi_dir = 'data/equi_corr'
lam1Types = c('val', 'cv', '1se')
alpha = 0.05
dir_pool = c(toe_dir)
design = c("toeplitz", "exp. decay", "equal cor.")
RATIOS = seq(from = 0, to = 4, by = 0.05)
UPPER = 10
lam2Coef = 0.5
# two step
volume_stein_single = list()
radius_stein_single = list()
volume_lasso_single = list()
radius_lasso_single = list()
volume_stein_multiple = list()
radius_stein_multiple = list()
volume_lasso_multiple = list()
radius_lasso_multiple = list()
for (i in 1:length(dir_pool)) {
temp = two_step_single(N, P, SVALUE, BVALUE, sig = SIG, lam1Types, alpha, ITE, dir_pool[i],
lam2Coef, RATIOS, UPPER)
temp[['volume_stein_df']]['design'] = design[i]
temp[['radius_stein_df']]['design'] = design[i]
temp[['volume_lasso_df']]['design'] = design[i]
temp[['radius_lasso_df']]['design'] = design[i]
volume_stein_single[[i]] = temp[['volume_stein_df']]
radius_stein_single[[i]] = temp[['radius_stein_df']]
volume_lasso_single[[i]] = temp[['volume_lasso_df']]
radius_lasso_single[[i]] = temp[['radius_lasso_df']]
}
summary_volume_stein_single = ldply(volume_stein_single)
summary_radius_stein_single = ldply(radius_stein_single)
summary_volume_lasso_single = ldply(volume_lasso_single)
summary_radius_lasso_single = ldply(radius_lasso_single)
save_list = c("summary_volume_stein_single", "summary_radius_stein_single",
"summary_volume_lasso_single", "summary_radius_lasso_single")
# "summary_adaptive_single", "summary_adaptive_multiple", "summary_oracle_single", "summary_oracle_multiple",
save(list = save_list, file = 'summary.Rdata')
setwd("C:/Study/Phd/HonestCI/R code/hoffman2/honest CI/n100p400_test2 differenet sigma")
# ite
library(plyr)
source("data_fun.R")
source("utils.R")
source("adaptive_fun.R")
source("oracle_fun.R")
source("two_step_fun.R")
N = 100
P = 400
SVALUE = c(10)
BVALUE = c(0.1, 0.3, 0.5, 0.7, 0.9, 1, 2, 3, 4, 5)
S_S = 5
B_S = c(0.1, 0.3, 0.5, 0.7, 0.9, 1, 1.2, 1.4, 1.6, 1.8, 2, 3, 4, 5)
S_W = 5
B_W = c(0.2)
ITE = 100
NFOLDS = 5
RATIOS = seq(from = 0, to = 4, by = 0.05)
SIG = 2
######################## data ###########################
dir.create("data", showWarnings = F)
# toeplitz
toe_dir = "data/toeplitz"
dir.create(toe_dir)
X_TYPE = 1
gen_data(N, P, toe_dir, ITE, X_TYPE)
covariate_single(N, P, SVALUE, BVALUE, toe_dir, ITE, NFOLDS, sig = SIG)
############################ summary #####################
toe_dir = "data/toeplitz"
exp_dir = 'data/exp_decay'
equi_dir = 'data/equi_corr'
lam1Types = c('val', 'cv', '1se')
alpha = 0.05
dir_pool = c(toe_dir)
design = c("toeplitz", "exp. decay", "equal cor.")
RATIOS = seq(from = 0, to = 4, by = 0.05)
UPPER = 10
lam2Coef = 0.5
# two step
volume_stein_single = list()
radius_stein_single = list()
volume_lasso_single = list()
radius_lasso_single = list()
volume_stein_multiple = list()
radius_stein_multiple = list()
volume_lasso_multiple = list()
radius_lasso_multiple = list()
for (i in 1:length(dir_pool)) {
temp = two_step_single(N, P, SVALUE, BVALUE, sig = SIG, lam1Types, alpha, ITE, dir_pool[i],
lam2Coef, RATIOS, UPPER)
temp[['volume_stein_df']]['design'] = design[i]
temp[['radius_stein_df']]['design'] = design[i]
temp[['volume_lasso_df']]['design'] = design[i]
temp[['radius_lasso_df']]['design'] = design[i]
volume_stein_single[[i]] = temp[['volume_stein_df']]
radius_stein_single[[i]] = temp[['radius_stein_df']]
volume_lasso_single[[i]] = temp[['volume_lasso_df']]
radius_lasso_single[[i]] = temp[['radius_lasso_df']]
}
summary_volume_stein_single = ldply(volume_stein_single)
summary_radius_stein_single = ldply(radius_stein_single)
summary_volume_lasso_single = ldply(volume_lasso_single)
summary_radius_lasso_single = ldply(radius_lasso_single)
save_list = c("summary_volume_stein_single", "summary_radius_stein_single",
"summary_volume_lasso_single", "summary_radius_lasso_single")
# "summary_adaptive_single", "summary_adaptive_multiple", "summary_oracle_single", "summary_oracle_multiple",
save(list = save_list, file = 'summary.Rdata')
