write.table(Y2Mat, fileY2, row.names = F, col.names = F)
write.table(lamCvMat, fileCv, row.names = F, col.names = F)
write.table(lam1seMat, file1se, row.names = F, col.names = F)
}
}
}
covariate_multiple = function(n, p, s_s, b_s, s_w, b_w, dir, ite, n_folds, sig = 1)
{
pathBeta = file.path(dir, "beta")
pathY1 = file.path(dir, "Y1")
pathY2 = file.path(dir, "Y2")
pathCv = file.path(dir, "cv")
path1se = file.path(dir, "1se")
dir.create(pathBeta,showWarnings = F)
dir.create(pathY1, showWarnings = F)
dir.create(pathY2, showWarnings = F)
dir.create(pathCv, showWarnings = F)
dir.create(path1se, showWarnings = F)
for (j in 1:length(b_s))
{
for (k in 1:length(b_w))
{
fileBeta = paste(pathBeta, '/beta', '_ss', s_s, '_bs', b_s[j], '_sw', s_w, '_bw', b_w[k], '.txt', sep="")
fileY1 = paste(pathY1, '/Y1', '_ss', s_s, '_bs', b_s[j], '_sw', s_w, '_bw', b_w[k], '.txt', sep="")
fileY2 = paste(pathY2, '/Y2', '_ss', s_s, '_bs', b_s[j], '_sw', s_w, '_bw', b_w[k], '.txt', sep="")
fileCv = paste(pathCv, '/cv', '_ss', s_s, '_bs', b_s[j], '_sw', s_w, '_bw', b_w[k], '.txt', sep="")
file1se = paste(path1se, '/1se', '_ss', s_s, '_bs', b_s[j], '_sw', s_w, '_bw', b_w[k], '.txt', sep="")
betaMat = matrix(0, nrow = ite, ncol = p)
Y1Mat = matrix(0, nrow = ite, ncol = n)
Y2Mat = matrix(0, nrow = ite, ncol = n)
lamCvMat = matrix(0, nrow = ite, ncol = 1)
lam1seMat = matrix(0, nrow = ite, ncol = 1)
for (i in 1:ite)
{
fileX1 = paste(dir, '/X1/', i, '.txt', sep = "")
fileX2 = paste(dir, '/X2/', i, '.txt', sep = "")
X1 = as.matrix(read.table(fileX1))
X2 = as.matrix(read.table(fileX2))
beta = generateBeta(p, s_s, b_s[j], type = 4, s_w, b_w[k])
betaMat[i,] = t(beta)
Y1 = tcrossprod(X1, t(beta)) + matrix(rnorm(n, sd = sig), ncol = 1)
Y1Mat[i,] = Y1
Y2Mat[i,] = tcrossprod(X2, t(beta)) + matrix(rnorm(n, sd = sig), ncol = 1)
cv_glmnet = cv.glmnet(X1, Y1, nfolds = n_folds, intercept = F)
lamCvMat[i,] = cv_glmnet$lambda.min
lam1seMat[i,] = cv_glmnet$lambda.1se
}
write.table(betaMat, fileBeta, row.names = F, col.names = F)
write.table(Y1Mat, fileY1, row.names = F, col.names = F)
write.table(Y2Mat, fileY2, row.names = F, col.names = F)
write.table(lamCvMat, fileCv, row.names = F, col.names = F)
write.table(lam1seMat, file1se, row.names = F, col.names = F)
}
}
}
# the name of each file _s_ -> _s
# utils readlambda
# gen_data, covariate_single, covariate_multiple
x = generateX(10, 20, 1)
library(matrixStats)
# normalize matrix columnwise
# x: matrix
# return: scaled matrix
colScale = function(x) {
cm = colMeans(x, na.rm = TRUE)
csd = colSds(x, center = cm)
x = t( (t(x) - cm) / csd )
return(x)
}
# squared l2-norm
# x: numeric vector
# return: the square of l2-norm of x
L2NormSquare = function(x)
{
return(crossprod(x)[1,1])
}
# Calculate baseline
# n: degree of freedom
# sig: standard deviation
# return: baseline
baseline = function(n, sig, percent=0.95)
{
return (sqrt(qchisq(percent, df = n) / n) * sig)
}
###################### Later #################################
# read particular lambda
# n: number of rows of X
# p: number of columns of X
# it
readLambda = function(n, p, ite, s, b, lamType, rawDir = NULL)
{
# cv
if (lamType == "cv")
{
path_cv = paste(rawDir, "/cv/","cv", "_s_", s, "_b_", b, ".txt", sep = "")
lam = as.numeric(read.table(path_cv, skip = (ite - 1), nrows = 1))
}
# 1se
else if (lamType == "1se")
{
path_1se = paste(rawDir, "/1se/","1se", "_s_", s, "_b_", b, ".txt", sep = "")
lam = as.numeric(read.table(path_1se, skip = (ite - 1), nrows = 1))
}
# theoretical value
else
{
lam = lamType * 2 * sqrt(2) * sqrt(log(p) / n)
}
return(lam)
}
####################################################
# return the  label of lam
# lamType: numeric
# return: string, description
####################################################
lamTypeLabel = function(lamType)
{
if (lamType == 1)
{
label = 'const'
} else if (lamType == 2)
{
label = '0.8_const'
} else if (lamType == 3)
{
label = '0.2_const'
} else if (lamType == 4)
{
label = 'cv'
} else if (lamType == 5)
{
label = '1se'
}
return(label)
}
x = generateX(10, 20, 1)
t(X) %*% X
t(x) %*% x
x %*% t(x)
colMeans(x)
t(x) %*% x
diag(t(x) %*% x)
x = lambda x: x
x = function(x) log(x) ^ 2
x(3)
x(1)
x(2)
x(3)
x(4)
x(5)
plot(cars)
plot(cars)
x <- 3
x
3 + rnorm(n = 1, mean = 2, sd = 1)
?ls
help('ls')
mode(d)
a = 1
b = 'hello world'
c = TRUE
d = 2 + 2i
mode(a)
mode(b)
mode(c)
mode(d)
length(a)
a = 1
b = 'hello world'
c = TRUE
d = 2 + 2i
mode(a)
mode(b)
mode(c)
mode(d)
length(a)
x = 5 / 0
x
exp(x)
x = matrix(c(1, 0.4, 0.18, 0.7, 0.9, 1.15, 4, 4, 4, 4, 4, 6), nrow = 4)
x
?`matrix-
?`matrix
?matrix
x = matrix(c(1, 0.4, 0.18, 0.7, 0.9, 1.15, 4, 4, 4, 4, 4, 6), nrow = 4, byrow = T)
x
y = c(0, 1, 0, 1)
x = as.data.frame(matrix(c(1, 0.4, 0.18, 0.7, 0.9, 1.15, 4, 4, 4, 4, 4, 6), nrow = 4, byrow = T))
x
x['y'] = y
x
svm(y ~ V1 + V2 + V3, data = x)
library(libsvm)
install.packages("libsvm")
install.packages("e1071")
library(e1071)
svm(y ~ V1 + V2 + V3, data = x)
pred = data.frame(V1 = c(1), V2 = c(2), V3 = c(4))
pred
predict(svm.model, pred)
svm.model = svm(y ~ V1 + V2 + V3, data = x)
pred = data.frame(V1 = c(1), V2 = c(2), V3 = c(4))
predict(svm.model, pred)
pred = data.frame(V1 = c(4), V2 = c(4), V3 = c(4))
predict(svm.model, pred)
pred = data.frame(V1 = c(4), V2 = c(4), V3 = c(6))
predict(svm.model, pred)
pred = data.frame(V1 = c(2), V2 = c(4), V3 = c(6))
predict(svm.model, pred)
3/0.9
3.1 / 2.1
4 / 1.47619 + 0.7
6-1.15
/1.47619 + 1.15
4.85/1.47619 + 1.15
?seq
x = scan()
x
?rep
rep(3, 5)
rep(c(1,3), 5)
rep(c(1,3), c(1, 3))
rnorm(4, mean=0, sd=100)
x <- rnorm(1)
if (x >= 0) {
print("x is greater than or equals 0")
}
x <- rnorm(1)
if (x >= 0) {
print("x is greater than or equals 0")
}
x <- rnorm(1)
if (x >= 0) {
print("x is greater than or equals 0")
}
x <- rnorm(1)
if (x >= 0) {
print("x is greater than or equals 0")
}
x <- rnorm(1)
if (x >= 0) {
print("x is greater than or equals 0")
}
x <- rnorm(1)
if (x >= 0) {
print("x is greater than or equals 0")
print(x)
}
x <- rnorm(1)
if (x >= 0) {
print("x is greater than or equals 0")
print(x)
}
x <- rnorm(1)
if (x >= 0) {
print("x is greater than or equals 0")
print(x)
} else {
"x is smaller than 0"
}
x <- rnorm(1)
if (x >= 0) {
print("x is greater than or equals 0")
print(x)
} else {
"x is smaller than 0"
}
if (x >= 0) {
print("x is greater than or equals 0")
print(x)
} if (x >= -5) {
x <- rnorm(1)
if (x >= 0) {
print("x is greater than or equals 0")
print(x)
} else if (x >= -5) {
print(x)
} else {
"x is smaller than -5"
}
!True
!T
for(i in seq(1, 5, 2)){
print(i)
}
as.character(3)
23 * 12
93 * 21
a = rep(0,10000)
for(i in 1:10000){
b = runif(200)
c = (b < 0.18)
a[i] = mean(c)
}
sd(a)
sqrt(0.18 * (1 - 0.18) / 200)
sd(a)
a = rep(0,10000)
for(i in 1:10000){
b = runif(200)
c = (b < 0.18)
a[i] = mean(c)
}
sd(a)
sqrt(0.18 * (1 - 0.18) / 200)
x = 1:5
y = 5:10
x + 1
x = 1:5
y = 5:10
x + 1
x + y
x = 1:5
y = 6:10
x + 1
x + y
x + z
z =1:8
z =1:8
x + z
setwd("C:/Study/TA/STAT13 Introduction to Statistical Methods for Life and Heath Sciences 2018 fall")
setwd("C:/Study/TA/STAT13 Introduction to Statistical Methods for Life and Heath Sciences 2018 fall")
setwd("C:/Study/TA/STAT13 Introduction to Statistical Methods for Life and Heath Sciences 2018 fall")
# ite
library(plyr)
source("data_fun.R")
source("utils.R")
source("adaptive_fun.R")
source("oracle_fun.R")
source("two_step_fun.R")
N = 200
P = 800
SVALUE = c(10)
BVALUE = c(0.1, 0.3, 0.5, 0.7, 0.9, 1, 2, 3, 4, 5)
S_S = 5
B_S = c(0.1, 0.3, 0.5, 0.7, 0.9, 1, 2, 3, 4, 5)
S_W = 5
B_W = c(0.1, 0.2)
ITE = 20
NFOLDS = 5
NUM_CANDIDATES = 40
SIG = 1
dir.create("data", showWarnings = F)
toe_dir = "data/toeplitz"
exp_dir = 'data/exp_decay'
equi_dir = 'data/equi_corr'
toe_dir = "data/toeplitz"
exp_dir = 'data/exp_decay'
equi_dir = 'data/equi_corr'
lam1Types = c('val', 'cv', '1se')
alpha = 0.05
dir_pool = c(toe_dir, exp_dir, equi_dir)
design = c("toeplitz", "exp. decay", "equal cor.")
UPPER = 10
lam2Coef = 0.5
# two step
volume_stein_single = list()
radius_stein_single = list()
volume_lasso_single = list()
radius_lasso_single = list()
for (i in 1:length(dir_pool)) {
temp = two_step_single(N, P, SVALUE, BVALUE, sig = SIG, lam1Types, alpha, ITE, dir_pool[i],
lam2Coef, RATIOS, UPPER)
temp[['volume_stein_df']]['design'] = design[i]
temp[['radius_stein_df']]['design'] = design[i]
temp[['volume_lasso_df']]['design'] = design[i]
temp[['radius_lasso_df']]['design'] = design[i]
volume_stein_single[[i]] = temp[['volume_stein_df']]
radius_stein_single[[i]] = temp[['radius_stein_df']]
volume_lasso_single[[i]] = temp[['volume_lasso_df']]
radius_lasso_single[[i]] = temp[['radius_lasso_df']]
}
summary_volume_stein_single = ldply(volume_stein_single)
summary_radius_stein_single = ldply(radius_stein_single)
summary_volume_lasso_single = ldply(volume_lasso_single)
summary_radius_lasso_single = ldply(radius_lasso_single)
# ite
library(plyr)
source("data_fun.R")
source("utils.R")
source("adaptive_fun.R")
source("oracle_fun.R")
source("two_step_fun.R")
N = 200
P = 800
SVALUE = c(10)
BVALUE = c(0.1, 0.3, 0.5, 0.7, 0.9, 1, 2, 3, 4, 5)
S_S = 5
B_S = c(0.1, 0.3, 0.5, 0.7, 0.9, 1, 2, 3, 4, 5)
S_W = 5
B_W = c(0.1, 0.2)
ITE = 20
NFOLDS = 5
NUM_CANDIDATES = 40
SIG = 1
dir.create("data", showWarnings = F)
toe_dir = "data/toeplitz"
exp_dir = 'data/exp_decay'
equi_dir = 'data/equi_corr'
toe_dir = "data/toeplitz"
exp_dir = 'data/exp_decay'
equi_dir = 'data/equi_corr'
lam1Types = c('val', 'cv', '1se')
alpha = 0.05
dir_pool = c(toe_dir, exp_dir, equi_dir)
design = c("toeplitz", "exp. decay", "equal cor.")
UPPER = 10
lam2Coef = 0.5
# two step
volume_stein_single = list()
radius_stein_single = list()
volume_lasso_single = list()
radius_lasso_single = list()
for (i in 1:length(dir_pool)) {
temp = two_step_single(N, P, SVALUE, BVALUE, sig = SIG, lam1Types, alpha, ITE, dir_pool[i],
lam2Coef, RATIOS, UPPER)
temp[['volume_stein_df']]['design'] = design[i]
temp[['radius_stein_df']]['design'] = design[i]
temp[['volume_lasso_df']]['design'] = design[i]
temp[['radius_lasso_df']]['design'] = design[i]
volume_stein_single[[i]] = temp[['volume_stein_df']]
radius_stein_single[[i]] = temp[['radius_stein_df']]
volume_lasso_single[[i]] = temp[['volume_lasso_df']]
radius_lasso_single[[i]] = temp[['radius_lasso_df']]
}
summary_volume_stein_single = ldply(volume_stein_single)
summary_radius_stein_single = ldply(radius_stein_single)
summary_volume_lasso_single = ldply(volume_lasso_single)
summary_radius_lasso_single = ldply(radius_lasso_single)
source("two_step_fun.R")
setwd("C:/Study/Phd/HonestCI/R code/hoffman2/honest CI/5 n200p800 new c_alpha")
library(plyr)
source("data_fun.R")
source("utils.R")
source("adaptive_fun.R")
source("oracle_fun.R")
source("two_step_fun.R")
N = 200
P = 800
SVALUE = c(10)
BVALUE = c(0.1, 0.3, 0.5, 0.7, 0.9, 1, 2, 3, 4, 5)
S_S = 5
B_S = c(0.1, 0.3, 0.5, 0.7, 0.9, 1, 2, 3, 4, 5)
S_W = 5
B_W = c(0.1, 0.2)
ITE = 20
NFOLDS = 5
NUM_CANDIDATES = 40
SIG = 1
dir.create("data", showWarnings = F)
toe_dir = "data/toeplitz"
exp_dir = 'data/exp_decay'
equi_dir = 'data/equi_corr'
toe_dir = "data/toeplitz"
exp_dir = 'data/exp_decay'
equi_dir = 'data/equi_corr'
lam1Types = c('val', 'cv', '1se')
alpha = 0.05
dir_pool = c(toe_dir, exp_dir, equi_dir)
design = c("toeplitz", "exp. decay", "equal cor.")
UPPER = 10
lam2Coef = 0.5
# two step
volume_stein_single = list()
radius_stein_single = list()
volume_lasso_single = list()
radius_lasso_single = list()
for (i in 1:length(dir_pool)) {
temp = two_step_single(N, P, SVALUE, BVALUE, sig = SIG, lam1Types, alpha, ITE, dir_pool[i],
lam2Coef, RATIOS, UPPER)
temp[['volume_stein_df']]['design'] = design[i]
temp[['radius_stein_df']]['design'] = design[i]
temp[['volume_lasso_df']]['design'] = design[i]
temp[['radius_lasso_df']]['design'] = design[i]
volume_stein_single[[i]] = temp[['volume_stein_df']]
radius_stein_single[[i]] = temp[['radius_stein_df']]
volume_lasso_single[[i]] = temp[['volume_lasso_df']]
radius_lasso_single[[i]] = temp[['radius_lasso_df']]
}
summary_volume_stein_single = ldply(volume_stein_single)
summary_radius_stein_single = ldply(radius_stein_single)
summary_volume_lasso_single = ldply(volume_lasso_single)
summary_radius_lasso_single = ldply(radius_lasso_single)
# two step
volume_stein_single = list()
radius_stein_single = list()
volume_lasso_single = list()
radius_lasso_single = list()
for (i in 1:length(dir_pool)) {
temp = two_step_single(N, P, SVALUE, BVALUE, sig = SIG, lam1Types, alpha, ITE, dir_pool[i],
lam2Coef, NUM_CANDIDATES, UPPER)
temp[['volume_stein_df']]['design'] = design[i]
temp[['radius_stein_df']]['design'] = design[i]
temp[['volume_lasso_df']]['design'] = design[i]
temp[['radius_lasso_df']]['design'] = design[i]
volume_stein_single[[i]] = temp[['volume_stein_df']]
radius_stein_single[[i]] = temp[['radius_stein_df']]
volume_lasso_single[[i]] = temp[['volume_lasso_df']]
radius_lasso_single[[i]] = temp[['radius_lasso_df']]
}
summary_volume_stein_single = ldply(volume_stein_single)
summary_radius_stein_single = ldply(radius_stein_single)
summary_volume_lasso_single = ldply(volume_lasso_single)
summary_radius_lasso_single = ldply(radius_lasso_single)
library(ggplot2)
ggplot(data = summary_volume_stein_single) +
geom_boxplot(aes(x = factor(b), y = k))
summary_volume_stein_single
summary_volume_stein_single$logVol
1+1
3 *3
(3 + 1) * 2
